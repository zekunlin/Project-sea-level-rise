return(ori_dest_df[i, ])
}
county_migration_table_copy[nr, ] <- return_matched_migration(i = nr,
ori_dest_df = county_migration_table_copy,
matrix_storage = matrix_storage_list)
registerDoParallel(cl)
system.time(
foreach (nr = 113205:113206, .combine=cbind) %dopar%{
county_migration_table_copy[nr, ] <- return_matched_migration(i = nr,
ori_dest_df = county_migration_table_copy,
matrix_storage = matrix_storage_list)
}
)
county_migration_table_copy[113205:113206,]
foreach (nr = 113205:113206, .combine=rbind) %dopar%{
county_migration_table_copy[nr, ] <- return_matched_migration(i = nr,
ori_dest_df = county_migration_table_copy,
matrix_storage = matrix_storage_list)
}
county_migration_table_copy[113205:113206,]
nr
foreach (nr = 113205:113207, .combine=rbind) %dopar%{
county_migration_table_copy[nr, ] <- return_matched_migration(i = nr,
ori_dest_df = county_migration_table_copy,
matrix_storage = matrix_storage_list)
}
county_migration_table_copy[113205:113207,]
cl=makeCluster(3)
registerDoParallel(cl)
DF=matrix(NA,ncol=5,nrow=10)
foreach(i=1:10) %dopar% {
DF[i,1]=i*1
DF[i,2]=i*2
DF[i,3]=i*3
DF[i,4]=i*4
DF[i,5]=i*5
}
DF
DF=matrix(NA,ncol=5,nrow=10)
for(i in 1:10) {
DF[i,1]=i*1
DF[i,2]=i*2
DF[i,3]=i*3
DF[i,4]=i*4
DF[i,5]=i*5
}
DF
DF=matrix(NA,ncol=5,nrow=10)
foreach(i=1:10, .combine=rbind) %dopar% {
DF[i,1]=i*1
DF[i,2]=i*2
DF[i,3]=i*3
DF[i,4]=i*4
DF[i,5]=i*5
}
foreach(i=1:10, .combine=rbind) %do% {
foreach(j=1:10, .combin=c) %do%{
DF[i,1]=i*1
DF[i,2]=i*2
DF[i,3]=i*3
DF[i,4]=i*4
DF[i,5]=i*5
}}
foreach(i=1:10, .combine=rbind) %do% {
foreach(j=1:10, .combine=c) %do%{
DF[i,1]=i*1
DF[i,2]=i*2
DF[i,3]=i*3
DF[i,4]=i*4
DF[i,5]=i*5
}}
system.time(
foreach (nr = 113205:113207, .combine=rbind) %dopar%{
foreach(nr = 113205:113207, .combine = c) %dopar%{
county_migration_table_copy[nr, ] <- return_matched_migration(i = nr,
ori_dest_df = county_migration_table_copy,
matrix_storage = matrix_storage_list)
}
}
)
stopImplicitCluster()
registerDoParallel(cl)
system.time(
foreach (nr = 113205:113207, .combine=rbind) %dopar%{
foreach(nri = 113205:113207, .combine = c) %dopar%{
county_migration_table_copy[nri, ] <- return_matched_migration(i = nri,
ori_dest_df = county_migration_table_copy,
matrix_storage = matrix_storage_list)
}
}
)
stopImplicitCluster()
registerDoParallel(cl)
foreach (nr = 113205:113207, .combine=rbind) %dopar%{
foreach(nri = 113205:113207, .combine = c) %dopar%{
county_migration_table_copy[nri, ] <- return_matched_migration(i = nri,
ori_dest_df = county_migration_table_copy,
matrix_storage = matrix_storage_list)
}
}
foreach (nr = 113205:113207, .combine=rbind) %do%{
foreach(nri = 113205:113207, .combine = c) %do%{
county_migration_table_copy[nri, ] <- return_matched_migration(i = nri,
ori_dest_df = county_migration_table_copy,
matrix_storage = matrix_storage_list)
}
}
county_migration_table_copy[113205:113207,]
foreach (nr = 113205:113207, .combine=c) %dopar%{
county_migration_table_copy[nri, ] <- return_matched_migration(i = nri,
ori_dest_df = county_migration_table_copy,
matrix_storage = matrix_storage_list)
}
stopImplicitCluster()
registerDoParallel(cl)
foreach (nr = 113205:113207, .combine=c) %dopar%{
county_migration_table_copy[nri, ] <- return_matched_migration(i = nri,
ori_dest_df = county_migration_table_copy,
matrix_storage = matrix_storage_list)
}
stopImplicitCluster()
stopImplicitCluster()
stopImplicitCluster()
registerDoParallel(cl)
foreach (nr = 113205:113207, .combine=c) %dopar%{
county_migration_table_copy[nr, ] <- return_matched_migration(i = nr,
ori_dest_df = county_migration_table_copy,
matrix_storage = matrix_storage_list)
}
foreach (nr = 113205:113207, .combine=rbind) %dopar%{
county_migration_table_copy[nr, ] <- return_matched_migration(i = nr,
ori_dest_df = county_migration_table_copy,
matrix_storage = matrix_storage_list)
}
stopImplicitCluster()
cl <- makeCluster(n_cores - 1)
registerDoParallel(cl)
foreach (nr = 113205:113207, .combine=rbind) %dopar%{
county_migration_table_copy[nr, ] <- return_matched_migration(i = nr,
ori_dest_df = county_migration_table_copy,
matrix_storage = matrix_storage_list)
}
county_migration_table_copy[113205:113207,]
foreach (nr = 113205:113217, .combine=rbind) %dopar%{
county_migration_table_copy[nr, ] <- return_matched_migration(i = nr,
ori_dest_df = county_migration_table_copy,
matrix_storage = matrix_storage_list)
}
county_migration_table_copy[113205:113217,]
foreach (nr = 113205:113217, .combine=c) %dopar%{
county_migration_table_copy[nr, ] <- return_matched_migration(i = nr,
ori_dest_df = county_migration_table_copy,
matrix_storage = matrix_storage_list)
}
?foreach
?lapply
county_migration_table_copy[nr, ] <- foreach (nr = 113205:113217, .combine=rbind) %dopar%{
return_matched_migration(i = nr,
ori_dest_df = county_migration_table_copy,
matrix_storage = matrix_storage_list)
}
warnings()
mclapply
set.seed(123)
x <- matrix(NA, nrow = 8, ncol = 2)
foreach(i=1:8) %dopar% {
foreach(j=1:2) %do% {
l <- runif(1, i, 100)
x[i,j] <- i + j + l     #This is much more complicated in my real code.
}
}
foreach(i=1:8) %dopar% {
foreach(j=1:2) %dopar% {
l <- runif(1, i, 100)
x[i,j] <- i + j + l     #This is much more complicated in my real code.
}
}
stopImplicitCluster()
library(doParallel)
library(foreach)
n_cores <- detectCores(logical = F)
cl <- makeCluster(n_cores - 1)
registerDoParallel(cl)
foreach(i=1:8) %dopar% {
foreach(j=1:2) %dopar% {
l <- runif(1, i, 100)
x[i,j] <- i + j + l     #This is much more complicated in my real code.
}
}
foreach(i=1:8)%dopar%{
foreach(j=1:2)%dopar%{
l <- runif(1, i, 100)
x[i,j] <- i + j + l     #This is much more complicated in my real code.
}
}
library(foreach)
foreach(i=1:8) %dopar%{
foreach(j=1:2) %dopar%{
l <- runif(1, i, 100)
x[i,j] <- i + j + l     #This is much more complicated in my real code.
}
}
library(doParallel)
foreach(i=1:8) %dopar%{
foreach(j=1:2) %dopar%{
l <- runif(1, i, 100)
x[i,j] <- i + j + l     #This is much more complicated in my real code.
}
}
foreach (nr = 113205:113217, .combine=rbind) %dopar%{
foreach(nri = 113205:113217, .combine = rbind) %dopar%{
county_migration_table_copy[nri, ] <- return_matched_migration(i = nri,
ori_dest_df = county_migration_table_copy,
matrix_storage = matrix_storage_list)
}s
}
foreach (nr = 113205:113217, .combine=rbind) %dopar%{
foreach(nri = 113205:113217, .combine = rbind) %dopar%{
county_migration_table_copy[nri, ] <- return_matched_migration(i = nri,
ori_dest_df = county_migration_table_copy,
matrix_storage = matrix_storage_list)
}
}
library(doParallel)
library(foreach)
stopImplicitCluster()
n_cores <- detectCores(logical = F)
cl <- makeCluster(n_cores - 1)
registerDoParallel(cl)
foreach (nr = 113205:113217, .combine=rbind) %dopar%{
foreach(nri = 113205:113217, .combine = rbind) %dopar%{
county_migration_table_copy[nri, ] <- return_matched_migration(i = nri,
ori_dest_df = county_migration_table_copy,
matrix_storage = matrix_storage_list)
}
}
foreach (nr = 113205:113217, .combine=rbind) %do%{
foreach(nri = 113205:113217, .combine = rbind) %do%{
county_migration_table_copy[nri, ] <- return_matched_migration(i = nri,
ori_dest_df = county_migration_table_copy,
matrix_storage = matrix_storage_list)
}
}
stopImplicitCluster()
stopImplicitCluster()
foreach (nr = 113205:113217, .combine=rbind) %do%{
county_migration_table_copy[nri, ] <- return_matched_migration(i = nr,
ori_dest_df = county_migration_table_copy,
matrix_storage = matrix_storage_list)
}
registerDoParallel(cl)
foreach (nr = 113205:113217, .combine=rbind) %do%{
county_migration_table_copy[nri, ] <- return_matched_migration(i = nr,
ori_dest_df = county_migration_table_copy,
matrix_storage = matrix_storage_list)
}
library(doParallel)
library(foreach)
n_cores <- detectCores(logical = F)
cl <- makeCluster(n_cores - 1)
registerDoParallel(cl)
foreach (nr = 113205:113217, .combine=rbind) %dopar%{
county_migration_table_copy[nri, ] <- return_matched_migration(i = nr,
ori_dest_df = county_migration_table_copy,
matrix_storage = matrix_storage_list)
}
foreach (nr = 113205:113217, .combine=cbind) %dopar%{
county_migration_table_copy[nri, ] <- return_matched_migration(i = nr,
ori_dest_df = county_migration_table_copy,
matrix_storage = matrix_storage_list)
}
foreach (nr = 113205:113217, .combine=rbind) %dopar%{
county_migration_table_copy[nri, ] <- return_matched_migration(i = nr,
ori_dest_df = county_migration_table_copy,
matrix_storage = matrix_storage_list)
}
matched_record_vector
stopImplicitCluster()
library(doMC)
install.packages("doMC")
results1 <- foreach (nr = 113205:113217, .combine=rbind) %dopar%{
county_migration_table_copy[nri, ] <- return_matched_migration(i = nr,
ori_dest_df = county_migration_table_copy,
matrix_storage = matrix_storage_list)
}
cl <- makeCluster(n_cores - 1)
registerDoParallel(cl)
results1 <- foreach (nr = 113205:113217, .combine=rbind) %dopar%{
county_migration_table_copy[nri, ] <- return_matched_migration(i = nr,
ori_dest_df = county_migration_table_copy,
matrix_storage = matrix_storage_list)
}
results1 <- foreach (nr = 113205:113217, .combine=rbind) %dopar%{
return_matched_migration(i = nr,
ori_dest_df = county_migration_table_copy,
matrix_storage = matrix_storage_list)
}
results1
#print(matched_record_vector)
#ori_dest_df[i, 5:12] <- matched_record_vector
return(c(ori_dest_df[i, 1:4], matched_record_vector))
stopImplicitCluster()
# unsolved part : parallel ####################################################
return_matched_migration <- function(i, ori_dest_df, matrix_storage){
ori_desti_dim <- dim(ori_dest_df)                                             # get the number of rows and columns in origins and destination frame
storage_length <- length(matrix_storage)                                      # get how many irs migration matrices are in the matrix storage list
matched_record_vector <- rep(NA, 8)
for (y in 1:storage_length) {
matrix_of_y <- as.data.frame(matrix_storage[[y]])
matched_record_ind <- which(matrix_of_y[,1] == ori_dest_df[i, 1] &        # get the row index of matched record
matrix_of_y[,2] == ori_dest_df[i, 2] &
matrix_of_y[,3] == ori_dest_df[i, 3] &
matrix_of_y[,4] == ori_dest_df[i, 4])
if(length(matched_record_ind)>0){                                          # consider 3 situation here: 1)duplicated matched record, 2)no returns, 3) valid returns
matched_record <- matrix_of_y[matched_record_ind, 7]                    # 7th column is the number of returns
if( length(unique(matched_record)) > 1){
matched_record <- mean(matched_record)
}else if(is.na(matched_record)){
matched_record <- 0
}else{
matched_record <- matched_record
}
}else{
matched_record <- 0
}
matched_record_vector[y] <- matched_record
}
#print(matched_record_vector)
#ori_dest_df[i, 5:12] <- matched_record_vector
return(c(ori_dest_df[i, 1:4], matched_record_vector))
}
results1 <- foreach (nr = 113205:113217, .combine=rbind) %dopar%{
return_matched_migration(i = nr,
ori_dest_df = county_migration_table_copy,
matrix_storage = matrix_storage_list)
}
results1
# unsolved part : parallel ####################################################
return_matched_migration <- function(i, ori_dest_df, matrix_storage){
ori_desti_dim <- dim(ori_dest_df)                                             # get the number of rows and columns in origins and destination frame
storage_length <- length(matrix_storage)                                      # get how many irs migration matrices are in the matrix storage list
matched_record_vector <- rep(NA, 8)
for (y in 1:storage_length) {
matrix_of_y <- as.data.frame(matrix_storage[[y]])
matched_record_ind <- which(matrix_of_y[,1] == ori_dest_df[i, 1] &        # get the row index of matched record
matrix_of_y[,2] == ori_dest_df[i, 2] &
matrix_of_y[,3] == ori_dest_df[i, 3] &
matrix_of_y[,4] == ori_dest_df[i, 4])
if(length(matched_record_ind)>0){                                          # consider 3 situation here: 1)duplicated matched record, 2)no returns, 3) valid returns
matched_record <- matrix_of_y[matched_record_ind, 7]                    # 7th column is the number of returns
if( length(unique(matched_record)) > 1){
matched_record <- mean(matched_record)
}else if(is.na(matched_record)){
matched_record <- 0
}else{
matched_record <- matched_record
}
}else{
matched_record <- 0
}
matched_record_vector[y] <- matched_record
}
#print(matched_record_vector)
ori_dest_df[i, 5:12] <- matched_record_vector
return(ori_dest_df[i, ])
}
k
nrow(county_migration_table)
stopImplicitCluster()
system.time(
library(doParallel)
library(foreach)
n_cores <- detectCores(logical = F)
cl <- makeCluster(n_cores - 1)
registerDoParallel(cl)
results1 <- foreach (nr = 1:nrow(county_migration_table), .combine=rbind) %dopar%{
return_matched_migration(i = nr, ori_dest_df = county_migration_table,
matrix_storage = matrix_storage_list)
}
)
n_cores <- detectCores(logical = F)
cl <- makeCluster(n_cores - 1)
registerDoParallel(cl)
results1 <- foreach (nr = 1:nrow(county_migration_table), .combine=rbind) %dopar%{
return_matched_migration(i = nr, ori_dest_df = county_migration_table,
matrix_storage = matrix_storage_list)
}
stopImplicitCluster()
write.table(x = results1, file = "E:/Zekun/total_migration_08_15_v2.csv", sep = ",", col.names = TRUE, row.names = FALSE)
head(all_ori_desti)
colnames(county_migration_table)
head(county_migration_table)
?lapply
dim(ori_dest_df)
dim(ori_dest_df)[1]
head(county_migration_table)
irs_data_box_length <- length(matrix_storage)
table_to_run <- county_migration_table
table_to_run <- county_migration_table[1:1000,]
for(irow in 1:dim(table_to_run)[1]){
matched_record_vector <- rep(NA, irs_data_box_length)
for(yth in 1:irs_data_box_length){
matrix_of_y <- as.data.frame(matrix_storage[[yth]])
matched_record_ind <- which(matrix_of_y[,1] == table_to_run[i, 1] &        # get the row index of matched record
matrix_of_y[,2] == table_to_run[i, 2] &
matrix_of_y[,3] == table_to_run[i, 3] &
matrix_of_y[,4] == table_to_run[i, 4])
if(length(matched_record_ind)>0){                                          # consider 3 situation here: 1)duplicated matched record, 2)no returns, 3) valid returns
matched_record_returns <- matrix_of_y[matched_record_ind, 7]               # 7th column is the number of returns
if( length(unique(matched_record_returns)) > 1){
matched_record <- mean(matched_record_returns)
}else if(is.na(matched_record_returns)){
matched_record <- 0
}else{
matched_record <- matched_record_returns
}
}else{
matched_record <- 0
}
matched_record_vector[yth] <- matched_record                                # save to yth element represent yth year
}
table_to_run[irow, 5:12] <- matched_record_vector
}
table_to_run
matched_record_ind
irow
mean(table_to_run$`2008`)
matrix_storage
matched_record_vector
which(matrix_of_y[,1] == table_to_run[i, 1] &        # get the row index of matched record
matrix_of_y[,2] == table_to_run[i, 2] &
matrix_of_y[,3] == table_to_run[i, 3] &
matrix_of_y[,4] == table_to_run[i, 4])
matrix_of_y[,1]
irow=1
matched_record_vector <- rep(NA, irs_data_box_length)
for(yth in 1:irs_data_box_length){
matrix_of_y <- as.data.frame(matrix_storage[[yth]])
matched_record_ind <- which(matrix_of_y[,1] == table_to_run[i, 1] &        # get the row index of matched record
matrix_of_y[,2] == table_to_run[i, 2] &
matrix_of_y[,3] == table_to_run[i, 3] &
matrix_of_y[,4] == table_to_run[i, 4])
if(length(matched_record_ind)>0){                                          # consider 3 situation here: 1)duplicated matched record, 2)no returns, 3) valid returns
matched_record_returns <- matrix_of_y[matched_record_ind, 7]               # 7th column is the number of returns
if( length(unique(matched_record_returns)) > 1){
matched_record <- mean(matched_record_returns)
}else if(is.na(matched_record_returns)){
matched_record <- 0
}else{
matched_record <- matched_record_returns
}
}else{
matched_record <- 0
}
matched_record_vector[yth] <- matched_record                                # save to yth element represent yth year
}
matched_record_vector
for(irow in 1:dim(table_to_run)[1]){
matched_record_vector <- rep(NA, irs_data_box_length)
for(yth in 1:irs_data_box_length){
matrix_of_y <- as.data.frame(matrix_storage[[yth]])
matched_record_ind <- which(matrix_of_y[,1] == table_to_run[irow, 1] &        # get the row index of matched record
matrix_of_y[,2] == table_to_run[irow, 2] &
matrix_of_y[,3] == table_to_run[irow, 3] &
matrix_of_y[,4] == table_to_run[irow, 4])
if(length(matched_record_ind)>0){                                          # consider 3 situation here: 1)duplicated matched record, 2)no returns, 3) valid returns
matched_record_returns <- matrix_of_y[matched_record_ind, 7]               # 7th column is the number of returns
if( length(unique(matched_record_returns)) > 1){
matched_record <- mean(matched_record_returns)
}else if(is.na(matched_record_returns)){
matched_record <- 0
}else{
matched_record <- matched_record_returns
}
}else{
matched_record <- 0
}
matched_record_vector[yth] <- matched_record                                # save to yth element represent yth year
}
table_to_run[irow, 5:12] <- matched_record_vector
}
table_to_run
table_to_run <- county_migration_table
for(irow in 1:dim(table_to_run)[1]){
matched_record_vector <- rep(NA, irs_data_box_length)
for(yth in 1:irs_data_box_length){
matrix_of_y <- as.data.frame(matrix_storage[[yth]])
matched_record_ind <- which(matrix_of_y[,1] == table_to_run[irow, 1] &        # get the row index of matched record
matrix_of_y[,2] == table_to_run[irow, 2] &
matrix_of_y[,3] == table_to_run[irow, 3] &
matrix_of_y[,4] == table_to_run[irow, 4])
if(length(matched_record_ind)>0){                                          # consider 3 situation here: 1)duplicated matched record, 2)no returns, 3) valid returns
matched_record_returns <- matrix_of_y[matched_record_ind, 7]               # 7th column is the number of returns
if( length(unique(matched_record_returns)) > 1){
matched_record <- mean(matched_record_returns)
}else if(is.na(matched_record_returns)){
matched_record <- 0
}else{
matched_record <- matched_record_returns
}
}else{
matched_record <- 0
}
matched_record_vector[yth] <- matched_record                                # save to yth element represent yth year
}
table_to_run[irow, 5:12] <- matched_record_vector
}
irow
table_to_run[, 2593722]
table_to_run[2593722,]
table_to_run[2593721,]
write.table(table_to_run, file = "E:/Zekun/total_migration_08_15_v3.csv", sep = ",", col.names = TRUE, row.names = FALSE)
